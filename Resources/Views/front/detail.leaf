#extend("basefront"):

#export("head"):
<!-- <link rel="stylesheet" href="//uicdn.toast.com/editor/latest/toastui-editor-viewer.min.css">
<link rel="stylesheet" href="//uicdn.toast.com/editor-plugin-code-syntax-highlight/latest/toastui-editor-plugin-code-syntax-highlight.min.css">
<link rel="stylesheet" href="//uicdn.toast.com/editor/latest/theme/toastui-editor-dark.min.css"> 
-->
<link rel="stylesheet" href="/styles/markdown.css">
#endexport

#export("content"):

<div class="flex mx-20 mb-20">
    <div class="flex-1 flex flex-col" x-data='{
        isAddPopupOpen: false,
        replyTarget: {},
        replyTargetType: 1, // 回复类型
        replyContent: "", // 回复内容
        replyLabel: "",
        replyCommentBtnClick(tag){
            #bjson("tag")
            this.replyTarget = tag;
            this.replyTargetType = 1;
            this.replyLabel = "回复" + tag.fromUser.name + "：";
            this.isAddPopupOpen = true;
        },
        replyReplyBtnClick(tag) {
            #bjson("tag")
            this.replyTargetType = 2;
            this.replyTarget = tag;
            this.replyLabel = "回复" + tag.fromUser.name + "：";
            this.isAddPopupOpen = true;
        }
    }'>
        <div class="article">
            <h1 class="my-10 text-5xl">#(data.title)</h1>
            <div class="flex flex-row items-center gap-4 mb-10">
                <div>#(data.owner.name)</div>
                <div>#date(data.createdAt, "yyyy-MM-dd")</div>
                <a class="btn bg-primary rounded-full" href="/list?listFor=category&categoryId=#(data.category.id)">#(data.category.name)</a>
            </div>
            <div id="markdown-body" class="markdown-body" data-content="#(data.content)" style="border: none;"></div>
            <hr class="mt-10">
            <div class="flex flex-row gap-2 mt-5">
                #for(tag in data.tags):
                <a class="btn bg-gray-800 py-2 px-5 rounded-full" href="/list?listFor=tag&tagId=#(tag.id)">##(tag.name)</a>
                #endfor
            </div>
        </div>
        <div class="mt-20" x-data="{
            addedComment: {}
        }">
            <div class="text-3xl bold">评论</div>
            <div class="flex flex-col mt-8">
                <textarea x-model="addedComment.content" class="textarea textarea-accent textarea-lg w-ful"  placeholder="发表评论"></textarea>
                <div class="flex flex-row justify-end">
                    <button data-id="#(data.id)" @click="addComment" class="btn bg-primary w-32 mt-4">发表评论</button>
                </div>
            </div>
        </div>

        <div class="mt-4">
            <div class="text-2xl">全部评论</div>
            <!-- 评论列表内容 -->
            #for(comment in comments):
            <div class="mt-10">
                <div class="flex flex-row justify-between">
                    <div class="text-xl">#(comment.fromUser.name)</div>
                    <div>#date(comment.createdAt, "yyyy-MM-dd")</div>
                </div>
                <div class="mt-2">#(comment.content)</div>
                <div class="mt-2">
                    <div class="btn" @click="replyCommentBtnClick('#jsonb(comment)')">回复</div>
                </div>

                #if(count(comment.replys) > 0):
                <div class="px-4 mt-4 bg-neutral-focus rounded ml-8">
                    #for(reply in comment.replys):
                    <div class="py-4">
                        <div class="flex flex-row justify-between">
                            #if(reply.targetType == "2"):
                            <div class="text-xl">#(reply.fromUser.name) 回复 #(reply.toUser.name)</div>
                            #else:
                            <div class="text-xl">#(reply.fromUser.name)</div>
                            #endif 
                            <div>#date(reply.createdAt, "yyyy-MM-dd")</div>
                        </div>
                        <div class="mt-2">#(reply.content)</div>
                        #if(reply.targetContent):
                        <div class="mt-2 bg-base-100 p-4 text-xs rounded">#(reply.targetContent)</div>
                        #endif
                        <div class="mt-2">
                            <div class="btn" @click="replyReplyBtnClick('#jsonb(reply)')">回复</div>
                        </div>
                    </div>
                    #endfor
                </div>
                #endif
            </div>
            #endfor
        </div>

        <div x-cloak x-show="isAddPopupOpen" x-transition @click.away="isAddPopupOpen = false" class="fixed inset-1 flex flex-col items-center justify-center">
            <div class="bg-black p-10 rounded-lg shadow-lg w-11/12 max-w-5xl relative">
              <div class="flex flex-col gap-5">
                <button class="btn absolute right-2 top-2" @click="isAddPopupOpen = false">✕</button>
                <div class="text-3xl">添加回复</div>
                <div>“<strong x-text="replyTarget.content"></strong>”</div>
                <label for="tag-content" x-text="replyLabel" class="block font-medium"></label>
                <input id="tag-content" type="text" x-model="replyContent" class="input" placeholder="回复内容" required>
                <button class="btn" @click="addReply">提交</button>
              </div>
            </div>
          </div>
    </div>
    <div class="ml-4 w-72">
        <div class="flex flex-col sticky right-20 top-36 p-4 rounded border">
            <div class="text-3xl">目录</div>
            <div id="markdown-toc" class="markdown-toc"></div>
        </div>
    </div>
</div>
<script>
    async function addReply() {
        var replyItem = {
            content: this.replyContent,
            targetType: this.replyTargetType,
            targetId: this.replyTarget.id,
        }
        if (this.replyTargetType == 1) {
            // 回复评论
            replyItem.commentId = this.replyTarget.id;
            replyItem.toUserId = this.replyTarget.fromUid;
        } else{
            // 回复某人的回复
            replyItem.commentId = this.replyTarget.commentId;
            replyItem.toUserId = this.replyTarget.fromUid;
        }
        try {
            const response = await fetch('/comment/reply', {
              method: 'POST',
              body: JSON.stringify(replyItem),
              headers: {
                'Content-Type': 'application/json'
              }
            });
            const data = await response.json();
            if (response.ok && data.code == 0) {
              showMySuccessToast("请求成功", () => {location.reload();});
              
            } else {
              showMyErrorToast(data.message ?? "请求失败");
            }
        } catch (error) {
            // 处理错误情况
            showMyErrorToast("发生异常:" + error);
        }
    }

    async function addComment(e) {
        this.addedComment.topicId = e.currentTarget.dataset.id;
        this.addedComment.topicType = 1; // 文章
        try {
            const response = await fetch('/comment', {
              method: 'POST',
              body: JSON.stringify(this.addedComment),
              headers: {
                'Content-Type': 'application/json'
              }
            });
            const data = await response.json();
            if (response.ok && data.code == 0) {
              showMySuccessToast("请求成功", () => {location.reload();});
            } else {
              showMyErrorToast(data.message ?? "请求失败");
            }
        } catch (error) {
            // 处理错误情况
            showMyErrorToast("发生异常:" + error);
        }
    }

</script>

<script src="//lf3-cdn-tos.bytecdntp.com/cdn/expire-1-y/marked/4.0.2/marked.min.js"></script>
<script src="/js/markdown-toc.js"></script>
<script>

  var content = document.getElementById('markdown-body').dataset.content;
  // 通过 marked.js 拿到解析后的信息
  let md = getMarkdownHTML(content);
  // Markdown 的 HTML
  document.getElementById('markdown-body').innerHTML = md.html
  // Markdown 目录的 HTML
  document.getElementById('markdown-toc').innerHTML = markdownToc.toHTML(md.tocTokens)

  // 各部分的 id 可以自己重设，此文件中为默认值
  markdownToc.chain.init()
  window.addEventListener("scroll", function () {
    markdownToc.chain.scroll()
  })

  // 对 marked.js 的标题设置，不影响其他元素解析
  function getMarkdownHTML(mdString) {
    let renderer = new marked.Renderer()
    /* 核心 - Start */
    renderer.tocTokens = [] // 目录信息
    renderer.heading = function (text, level, raw, slugger) {
      if (this.options.headerIds) {
        let anchor = this.options.headerPrefix + slugger.slug(raw)
        this.tocTokens.push({text, level, anchor})
        return `<h${level} id="${anchor}" class="markdown-body-anchor" index="${this.tocTokens.length - 1}">${text}</h${level}>`
      }
      return `<h${level}>${text}</h${level}>`
    }
    /* End */
    marked.setOptions({
      renderer: renderer,
      headerPrefix: 'md' // 可有可无，只是避免重复
    })
    return {
      html: marked.parse(mdString),
      tocTokens: renderer.tocTokens
    }
  }
</script>

#endexport
#endextend