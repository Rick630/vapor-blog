name: Swift Vapor Cross-Compile CI/CD

on:
  push:
    branches: [dev, main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_arch: ["x86_64", "arm64"]  # 同时编译 x86_64 和 arm64
    steps:
      - uses: actions/checkout@v3

      - name: 安装交叉编译依赖 (仅 arm64)
        if: matrix.target_arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross

      - name: 编译指定架构
        run: |
          if [ "${{ matrix.target_arch }}" == "arm64" ]; then
            # 交叉编译 arm64
            swift build \
              -c release \
              --static-swift-stdlib \
              --triple arm64-unknown-linux-gnu \
              -Xlinker -fuse-ld=lld \
              -Xlinker --target=aarch64-linux-gnu
          else
            # 正常编译 x86_64
            swift build -c release --static-swift-stdlib
          fi

          # 重命名二进制以区分架构
          mv .build/release/App ./App-${{ matrix.target_arch }}

      - name: 验证二进制架构
        run: |
          file ./App-${{ matrix.target_arch }}

      - name: 打包产物
        run: |
          mkdir -p release-${{ matrix.target_arch }}
          mv App-${{ matrix.target_arch }} release-${{ matrix.target_arch }}/
          cp -r Public Resources release-${{ matrix.target_arch }}/
          cd release-${{ matrix.target_arch }} && zip -r ../vapor-app-${{ matrix.target_arch }}.zip .

      - uses: actions/upload-artifact@v4
        with:
          name: vapor-app-${{ matrix.target_arch }}
          path: vapor-app-${{ matrix.target_arch }}.zip
